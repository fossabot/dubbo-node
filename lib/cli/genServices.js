"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var genAst_1 = require("./genAst");
var prettier_config_1 = require("./prettier-config");
var prettier = require("prettier");
var NEW_LINE = '\r\n';
var NEW_LINE_2 = '\r\n\r\n';
var header = "/**" + NEW_LINE + " * Auto generated by Dubbo2Ts." + NEW_LINE + " *" + NEW_LINE + " * " + new Date().toString() + NEW_LINE + " */" + NEW_LINE_2;
var ALL_SERVICES = [];
var mapType = function (javaType) {
    // 将java类型映射为ts类型
    switch (javaType) {
        case 'java.lang.Integer':
        case 'java.lang.Long':
        case 'java.lang.Short':
        case 'java.lang.Byte':
        case 'java.lang.Float':
        case 'java.lang.Double':
            return 'number';
        case 'java.lang.Boolean':
            return 'boolean';
        case 'java.lang.String':
            return 'string';
        case 'java.lang.Void':
            return 'void';
        default:
            return 'any'; // TODO 将自定义Java类装换为TS接口
    }
};
var genServices = function (code, group, version, timeout) {
    if (group === void 0) { group = 'dubbo'; }
    if (version === void 0) { version = 'LATEST'; }
    if (timeout === void 0) { timeout = 6000; }
    var ast = genAst_1.default(code);
    var pkg = ast.package.value;
    var serviceNames = Object.keys(ast.interface);
    var codes = serviceNames.map(function (key) {
        var serviceAst = ast.interface[key];
        return genService(pkg, key, serviceAst, group, version, timeout);
    });
    // codes.push(genIndexFile(serviceNames));
    ALL_SERVICES = ALL_SERVICES.concat(serviceNames);
    return codes;
};
var genService = function (pkg, serviceName, serviceAst, group, version, timeout) {
    var serviceHeadHandler = function () {
        var heads = [];
        heads.push("export const ServiceHead = {" + NEW_LINE);
        heads.push("interfac: \"" + pkg + "." + serviceName + "\"," + NEW_LINE);
        heads.push("version: \"" + version + "\"," + NEW_LINE);
        heads.push("timeout: " + timeout.toString() + "," + NEW_LINE);
        heads.push("group: \"" + group + "\"," + NEW_LINE);
        heads.push("methods: {" + NEW_LINE);
        var functions = serviceAst.functions;
        Object.keys(functions).forEach(function (key) {
            var func = functions[key];
            var args = func.args;
            var argsSignature = args.map(function (arg) {
                return "{$class: \"" + arg.type + "\", $: " + arg.name + "}";
            });
            heads.push(key + ": (" + args.map(function (arg) { return arg.name; }).join(',') + ") => [\n                " + argsSignature + "\n            ],");
        });
        heads.push("}" + NEW_LINE);
        heads.push("};" + NEW_LINE_2);
        return heads.join('') + NEW_LINE_2;
    };
    var methodHandler = function (name, func) {
        var methodCode = [];
        var args = func.args;
        var argNames = args.map(function (arg) { return arg.name; });
        methodCode.push("export function " + name + "(" + args.map(function (arg) { return arg.name + ': ' + mapType(arg.type); }).join(',') + ") {" + NEW_LINE);
        methodCode.push("return Dubbo.exec<" + mapType(func.type) + ">(\"" + serviceName + "." + name + "\", " + argNames.join(',') + ")");
        methodCode.push("}" + NEW_LINE_2);
        return methodCode.join('');
    };
    var code = [];
    code.push(header);
    code.push("import Dubbo from \"dubbo-node-zookeeper\";" + NEW_LINE_2);
    code.push(serviceHeadHandler());
    var functionNames = Object.keys(serviceAst.functions);
    functionNames.forEach(function (key) {
        code.push(methodHandler(key, serviceAst.functions[key]));
    });
    code.push("export default {" + NEW_LINE + functionNames.join(',') + "};");
    return {
        name: serviceName,
        code: prettier.format(code.join(''), prettier_config_1.default)
    };
};
var genIndexFile = function () {
    var code = [];
    code.push(header);
    ALL_SERVICES.forEach(function (name) {
        code.push("import {ServiceHead as " + name + "} from \"./" + name + "\";" + NEW_LINE);
    });
    code.push(NEW_LINE_2 + "export default {" + NEW_LINE + ALL_SERVICES.join(',') + NEW_LINE + "};");
    return {
        name: 'index',
        code: prettier.format(code.join(''), prettier_config_1.default)
    };
};
exports.default = { genServices: genServices, genIndexFile: genIndexFile };
